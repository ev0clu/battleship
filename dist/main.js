(()=>{"use strict";var n={358:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(537),r=t.n(i),o=t(645),a=t.n(o)()(r());a.push([n.id,"/* --- Reset CSS --- */\n/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n    display: block;\n}\nbody {\n    line-height: 1;\n}\nol,\nul {\n    list-style: none;\n}\nblockquote,\nq {\n    quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n    content: '';\n    content: none;\n}\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}\n/* --- Reset end --- */\n","",{version:3,sources:["webpack://./src/assets/reset.css"],names:[],mappings:"AAAA,sBAAsB;AACtB;;;CAGC;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiFI,SAAS;IACT,UAAU;IACV,SAAS;IACT,eAAe;IACf,aAAa;IACb,wBAAwB;AAC5B;AACA,gDAAgD;AAChD;;;;;;;;;;;IAWI,cAAc;AAClB;AACA;IACI,cAAc;AAClB;AACA;;IAEI,gBAAgB;AACpB;AACA;;IAEI,YAAY;AAChB;AACA;;;;IAII,WAAW;IACX,aAAa;AACjB;AACA;IACI,yBAAyB;IACzB,iBAAiB;AACrB;AACA,sBAAsB",sourcesContent:["/* --- Reset CSS --- */\n/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n    display: block;\n}\nbody {\n    line-height: 1;\n}\nol,\nul {\n    list-style: none;\n}\nblockquote,\nq {\n    quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n    content: '';\n    content: none;\n}\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}\n/* --- Reset end --- */\n"],sourceRoot:""}]);const s=a},774:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(537),r=t.n(i),o=t(645),a=t.n(o)()(r());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto&family=Saira+Stencil+One&family=Nunito&display=swap);"]),a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200);"]),a.push([n.id,":root {\n    --body-color: #f5f5f4;\n    --board-shadow: rgba(0, 0, 0, 0.35) 2px 5px 15px;\n    --board-color: #fafaf9;\n    --ship-color: #0891b2;\n    --miss-color: #e7e5e4;\n    --hit-color: #ef4444;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Saira Stencil One', cursive, 'Segoe UI', Helvetica, Arial, sans-serif,\n        'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', system-ui;\n    min-height: 100vh;\n    /*min-width: 100vw;*/\n    font-size: 16px;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--body-color);\n}\n\nheader {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    padding: 1rem 0 1rem 0;\n}\n\nheader h1 {\n    font-size: 5rem;\n    letter-spacing: 0.2rem;\n}\n\nmain {\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n#content {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    gap: 3rem;\n}\n\n.cell-player-board,\n.cell-computer-board {\n    font-family: 'Nunito', sans-serif, 'Segoe UI', 'Roboto', Helvetica, Arial, sans-serif,\n        'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', system-ui;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 8rem;\n    border: 1px solid black;\n    cursor: crosshair;\n}\n\n.ship {\n    background-color: var(--ship-color);\n}\n\n#player-board,\n#computer-board {\n    display: grid;\n    grid-template-columns: repeat(10, 2.5rem);\n    grid-template-rows: repeat(10, 2.5rem);\n    box-shadow: var(--board-shadow);\n    background-color: var(--board-color);\n    border: 1px solid black;\n}\n\n#turn-info {\n    font-size: 2rem;\n}\n\n.miss {\n    background-color: var(--miss-color);\n}\n\n.miss::after {\n    content: '•';\n    font-size: 2rem;\n    color: black;\n}\n\n.hit {\n    background-color: var(--hit-color);\n}\n\n.hit::after {\n    content: 'X';\n    font-weight: 500;\n    font-size: 2rem;\n    color: black;\n}\n\n.material-symbols-outlined:hover {\n    font-variation-settings: 'FILL' 0, 'wght' 700, 'GRAD' 0, 'opsz' 48;\n    cursor: pointer;\n}\n\n.material-symbols-outlined {\n    font-size: 2rem;\n    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n}\n\nfooter {\n    /*position: absolute;\n    bottom: 0;*/\n    font-family: 'Roboto', sans-serif, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji',\n        'Segoe UI Emoji', 'Segoe UI Symbol', system-ui;\n    width: 100%;\n    height: 2.5rem;\n    font-size: 18px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n}\n\n.reflink {\n    width: 25px;\n    text-align: center;\n}\n\n.github-img {\n    width: 20px;\n    height: 20px;\n}\n\n.github-img:hover {\n    width: 25px;\n    height: 25px;\n}\n\n/* MEDIA QUERIES */\n\n@media (max-width: 1200px) {\n}\n\n@media (max-width: 750px) {\n}\n","",{version:3,sources:["webpack://./src/assets/style.css"],names:[],mappings:"AAGA;IACI,qBAAqB;IACrB,gDAAgD;IAChD,sBAAsB;IACtB,qBAAqB;IACrB,qBAAqB;IACrB,oBAAoB;AACxB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI;2EACuE;IACvE,iBAAiB;IACjB,oBAAoB;IACpB,eAAe;IACf,aAAa;IACb,sBAAsB;IACtB,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,OAAO;IACP,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;;IAEI;2EACuE;IACvE,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,uBAAuB;IACvB,iBAAiB;AACrB;;AAEA;IACI,mCAAmC;AACvC;;AAEA;;IAEI,aAAa;IACb,yCAAyC;IACzC,sCAAsC;IACtC,+BAA+B;IAC/B,oCAAoC;IACpC,uBAAuB;AAC3B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,YAAY;IACZ,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,kEAAkE;IAClE,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,kEAAkE;AACtE;;AAEA;IACI;eACW;IACX;sDACkD;IAClD,WAAW;IACX,cAAc;IACd,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA,kBAAkB;;AAElB;AACA;;AAEA;AACA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto&family=Saira+Stencil+One&family=Nunito&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200');\n\n:root {\n    --body-color: #f5f5f4;\n    --board-shadow: rgba(0, 0, 0, 0.35) 2px 5px 15px;\n    --board-color: #fafaf9;\n    --ship-color: #0891b2;\n    --miss-color: #e7e5e4;\n    --hit-color: #ef4444;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Saira Stencil One', cursive, 'Segoe UI', Helvetica, Arial, sans-serif,\n        'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', system-ui;\n    min-height: 100vh;\n    /*min-width: 100vw;*/\n    font-size: 16px;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--body-color);\n}\n\nheader {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    padding: 1rem 0 1rem 0;\n}\n\nheader h1 {\n    font-size: 5rem;\n    letter-spacing: 0.2rem;\n}\n\nmain {\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n#content {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    gap: 3rem;\n}\n\n.cell-player-board,\n.cell-computer-board {\n    font-family: 'Nunito', sans-serif, 'Segoe UI', 'Roboto', Helvetica, Arial, sans-serif,\n        'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', system-ui;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 8rem;\n    border: 1px solid black;\n    cursor: crosshair;\n}\n\n.ship {\n    background-color: var(--ship-color);\n}\n\n#player-board,\n#computer-board {\n    display: grid;\n    grid-template-columns: repeat(10, 2.5rem);\n    grid-template-rows: repeat(10, 2.5rem);\n    box-shadow: var(--board-shadow);\n    background-color: var(--board-color);\n    border: 1px solid black;\n}\n\n#turn-info {\n    font-size: 2rem;\n}\n\n.miss {\n    background-color: var(--miss-color);\n}\n\n.miss::after {\n    content: '•';\n    font-size: 2rem;\n    color: black;\n}\n\n.hit {\n    background-color: var(--hit-color);\n}\n\n.hit::after {\n    content: 'X';\n    font-weight: 500;\n    font-size: 2rem;\n    color: black;\n}\n\n.material-symbols-outlined:hover {\n    font-variation-settings: 'FILL' 0, 'wght' 700, 'GRAD' 0, 'opsz' 48;\n    cursor: pointer;\n}\n\n.material-symbols-outlined {\n    font-size: 2rem;\n    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n}\n\nfooter {\n    /*position: absolute;\n    bottom: 0;*/\n    font-family: 'Roboto', sans-serif, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji',\n        'Segoe UI Emoji', 'Segoe UI Symbol', system-ui;\n    width: 100%;\n    height: 2.5rem;\n    font-size: 18px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n}\n\n.reflink {\n    width: 25px;\n    text-align: center;\n}\n\n.github-img {\n    width: 20px;\n    height: 20px;\n}\n\n.github-img:hover {\n    width: 25px;\n    height: 25px;\n}\n\n/* MEDIA QUERIES */\n\n@media (max-width: 1200px) {\n}\n\n@media (max-width: 750px) {\n}\n"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",i=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),i&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),i&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,i,r,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(i)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<n.length;c++){var A=[].concat(n[c]);i&&a[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,i=0;i<e.length;i++)if(e[i].identifier===n){t=i;break}return t}function i(n,i){for(var o={},a=[],s=0;s<n.length;s++){var l=n[s],c=i.base?l[0]+i.base:l[0],A=o[c]||0,p="".concat(c," ").concat(A);o[c]=A+1;var d=t(p),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(h);else{var f=r(h,i);i.byIndex=s,e.splice(s,0,{identifier:p,updater:f,references:1})}a.push(p)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var o=i(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var s=t(o[a]);e[s].references--}for(var l=i(n,r),c=0;c<o.length;c++){var A=t(o[c]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}o=l}}},569:n=>{var e={};n.exports=function(n,t){var i=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var i="";t.supports&&(i+="@supports (".concat(t.supports,") {")),t.media&&(i+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(i+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),i+=t.css,r&&(i+="}"),t.media&&(i+="}"),t.supports&&(i+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return n[i](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var i=e.getElementsByTagName("script");i.length&&(n=i[i.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),i=t(795),r=t.n(i),o=t(569),a=t.n(o),s=t(565),l=t.n(s),c=t(216),A=t.n(c),p=t(589),d=t.n(p),h=t(358),f={};f.styleTagTransform=d(),f.setAttributes=l(),f.insert=a().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=A(),e()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;var u=t(774),m={};m.styleTagTransform=d(),m.setAttributes=l(),m.insert=a().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=A(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;const g=t.p+"7615be16eed41f806def.png",b=(()=>{const n=(n,e)=>{const t=document.createElement("div");t.id=n;for(let i=0;i<e;i++)for(let r=0;r<e;r++){const e=document.createElement("div");e.setAttribute("class",`cell-${n}`),e.setAttribute("data-x",`${i}`),e.setAttribute("data-y",`${r}`),t.appendChild(e)}return t};return{renderPage:()=>{document.querySelector("body").append((()=>{const n=document.createElement("header"),e=document.createElement("h1");return e.textContent="BATTLESHIP",n.appendChild(e),n})(),(()=>{const e=document.createElement("main"),t=document.createElement("div");return t.id="content",t.append(n("player-board",10),(()=>{const n=document.createElement("div");return n.id="middle-container",n.appendChild((()=>{const n=document.createElement("div");return n.id="turn-info",n.textContent="Your turn",n})()),n})(),n("computer-board",10)),e.appendChild(t),e})(),(()=>{const n=document.createElement("footer");return n.append((()=>{const n=document.createElement("p"),e=(new Date).getFullYear();return n.textContent=`Copyright © Laszlo Kis ${e}`,n})(),(()=>{const n=document.createElement("a");n.classList.add("reflink"),n.href="https://github.com/ev0clu",n.target="_blank";const e=document.createElement("img");return e.classList.add("github-img"),e.src=g,e.alt="Github logo",n.appendChild(e),n})()),n})())},addShipToBoard:(n,e)=>{const t=document.querySelectorAll(".cell-player-board"),i=document.querySelectorAll(".cell-computer-board");let r="";"player"===n?r=t:"computer"===n&&(r=i),e.forEach((n=>{n.forEach((n=>{if(n.isShip)for(let e=0;e<r.length;e++)if(Number(r[e].getAttribute("data-x"))===n.x&&Number(r[e].getAttribute("data-y"))===n.y){r[e].classList.add("ship");break}}))}))}}})(),C=n=>{const e=n,t=[];return function(){for(let n=0;n<e;n++)t[n]=!1}(),{get length(){return e},get hitArray(){return t},hit:n=>{t[n]=!0},isSunk:()=>t.every((n=>!0===n))}},y=()=>{const n=[],e=10;!function(){for(let t=0;t<e;t++){n[t]=[];for(let i=0;i<e;i++){const e={isShip:!1,ship:{},shipIndex:null,isHit:!1,x:t,y:i};n[t].push(e)}}}();const t=(t,i,r,o)=>{let a=!0;if("vertical"===r)if(t<=e-o.length){for(let e=0;e<o.length;e++)if(n[t+e][i].isShip){a=!1;break}if(0===t&&0===i)if(n[t+o.length][i].isShip)a=!1;else for(let e=0;e<o.length+1;e++)if(n[t+e][i+1].isShip){a=!1;break}if(0===t&&i>0&&i<9)if(n[t+o.length][i].isShip)a=!1;else{for(let e=0;e<o.length+1;e++)if(n[t+e][i-1].isShip){a=!1;break}for(let e=0;e<o.length+1;e++)if(n[t+e][i+1].isShip){a=!1;break}}if(0===t&&9===i)if(n[t+o.length][i].isShip)a=!1;else for(let e=0;e<o.length+1;e++)if(n[t+e][i-1].isShip){a=!1;break}if(t>0&&t<e-o.length&&0===i)if(n[t-1][i].isShip||n[t+o.length][i].isShip)a=!1;else for(let e=-1;e<o.length+1;e++)if(n[t+e][i+1].isShip){a=!1;break}if(t>0&&t<e-o.length&&i>0&&i<9)if(n[t-1][i].isShip||n[t+o.length][i].isShip)a=!1;else{for(let e=-1;e<o.length+1;e++)if(n[t+e][i-1].isShip){a=!1;break}for(let e=-1;e<o.length+1;e++)if(n[t+e][i+1].isShip){a=!1;break}}if(t>0&&t<e-o.length&&9===i)if(n[t-1][i].isShip||n[t+o.length][i].isShip)a=!1;else for(let e=-1;e<o.length+1;e++)if(n[t+e][i-1].isShip){a=!1;break}if(t===e-o.length&&0===i)if(n[t-1][i].isShip)a=!1;else for(let e=-1;e<o.length;e++)if(n[t+e][i+1].isShip){a=!1;break}if(t===e-o.length&&i>0&&i<9)if(n[t-1][i].isShip)a=!1;else{for(let e=-1;e<o.length;e++)if(n[t+e][i-1].isShip){a=!1;break}for(let e=-1;e<o.length;e++)if(n[t+e][i+1].isShip){a=!1;break}}if(t===e-o.length&&9===i)if(n[t-1][i].isShip)a=!1;else for(let e=-1;e<o.length;e++)if(n[t+e][i-1].isShip){a=!1;break}}else a=!1;else if("horizontal"===r)if(i<=e-o.length){for(let e=0;e<o.length;e++)if(n[t][i+e].isShip){a=!1;break}if(0===t&&0===i)if(n[t][i+o.length].isShip)a=!1;else for(let e=0;e<o.length+1;e++)if(n[t+1][i+e].isShip){a=!1;break}if(0===t&&i>0&&i<e-o.length)if(n[t][i-1].isShip||n[t][i+o.length].isShip)a=!1;else for(let e=-1;e<o.length+1;e++)if(n[t+1][i+e].isShip){a=!1;break}if(0===t&&i===e-o.length)if(n[t][i-1].isShip)a=!1;else for(let e=-1;e<o.length;e++)if(n[t+1][i+e].isShip){a=!1;break}if(t>0&&t<9&&0===i)if(n[t][i+o.length].isShip)a=!1;else{for(let e=0;e<o.length+1;e++)if(n[t-1][i+e].isShip){a=!1;break}for(let e=0;e<o.length+1;e++)if(n[t+1][i+e].isShip){a=!1;break}}if(t>0&&t<9&&i>0&&i<e-o.length)if(n[t][i-1].isShip||n[t][i+o.length].isShip)a=!1;else{for(let e=-1;e<o.length+1;e++)if(n[t-1][i+e].isShip){a=!1;break}for(let e=-1;e<o.length+1;e++)if(n[t+1][i+e].isShip){a=!1;break}}if(t>0&&t<9&&i===e-o.length)if(n[t][i-1].isShip)a=!1;else{for(let e=-1;e<o.length;e++)if(n[t-1][i+e].isShip){a=!1;break}for(let e=-1;e<o.length;e++)if(n[t+1][i+e].isShip){a=!1;break}}if(9===t&&0===i)if(n[t][i+o.length].isShip)a=!1;else for(let e=0;e<o.length+1;e++)if(n[t-1][i+e].isShip){a=!1;break}if(9===t&&i>0&&i<e-o.length)if(n[t][i-1].isShip||n[t][i+o.length].isShip)a=!1;else for(let e=-1;e<o.length+1;e++)if(n[t-1][i+e].isShip){a=!1;break}if(9===t&&i===e-o.length)if(n[t][i-1].isShip)a=!1;else for(let e=-1;e<o.length;e++)if(n[t-1][i+e].isShip){a=!1;break}}else a=!1;return a},i=(e,t,i)=>{for(let r=0;r<i.length;r++)n[e+r][t].isShip=!0,n[e+r][t].ship=i,n[e+r][t].shipIndex=r},r=(e,t,i)=>{for(let r=0;r<i.length;r++)n[e][t+r].isShip=!0,n[e][t+r].ship=i,n[e][t+r].shipIndex=r};return{get board(){return n},canPlaceShip:t,placeShipVertical:i,placeShipHorizontal:r,receiveAttack:(e,t)=>!0===n[e][t].isShip?(n[e][t].ship.hit(n[e][t].shipIndex),n[e][t].isHit=!0,!0):(n[e][t].isHit=!0,!1),isAllShipsSunk:()=>{const e=[];return n.forEach((n=>{n.forEach((n=>{n.isShip&&e.push(n.ship.isSunk())}))})),!e.some((n=>!1===n))},randomPlaceShip:n=>{const e=Math.random()<.5?"vertical":"horizontal";let o=!1;for(;!o;){const{x:a,y:s}={x:Math.floor(10*Math.random()),y:Math.floor(10*Math.random())};t(a,s,e,n)&&("vertical"===e?i(a,s,n):"horizontal"===e&&r(a,s,n),o=!0)}}}},I=()=>{let n=!0;return{get isMyTurn(){return n},changeTurn:()=>{n=!n},randomAttack:n=>{const e=[];n.board.forEach((n=>{n.forEach((n=>{n.isHit||e.push({x:n.x,y:n.y})}))}));const t=Math.floor(Math.random()*e.length);return e[t]}}},S=(()=>{const n=I(),e=I(),t=y(),i=y();return{initGame:()=>{n.isMyTurn=!0,e.isMyTurn=!1},isPlayerTurn:()=>!!n.isMyTurn,changeTurn:()=>{n.changeTurn()},isCoordinateFree:(n,e,r)=>"computer"===n?!i.board[e][r].isHit:"player"===n?!t.board[e][r].isHit:void 0,isShipHit:(n,e,r)=>"player"===n?t.receiveAttack(e,r):i.receiveAttack(e,r),isShipSunk:(n,e,r)=>"player"===n?t.board[e][r].ship.isSunk():i.board[e][r].ship.isSunk(),computerRandomAttack:()=>e.randomAttack(t),randomShipPlacing:()=>{const n=(()=>{const n=[],e=C(5),t=C(4),i=C(3),r=C(3),o=C(2);return n.push(e,t,i,r,o),n})();n.forEach((n=>{t.randomPlaceShip(n)})),n.forEach((n=>{i.randomPlaceShip(n)})),b.addShipToBoard("player",t.board),b.addShipToBoard("computer",i.board)}}})(),v=(()=>{const n=()=>{const e=document.querySelectorAll(".cell-player-board"),t=S.computerRandomAttack();e.forEach((e=>{Number(e.getAttribute("data-x"))===t.x&&Number(e.getAttribute("data-y"))===t.y&&S.isCoordinateFree("player",t.x,t.y)&&(S.isShipHit("player",t.x,t.y)?(e.classList.add("hit"),n()):(e.classList.add("miss"),setTimeout(S.changeTurn(),500)))}))};return{initPage:()=>{b.renderPage()},playerEvent:()=>{document.querySelectorAll(".cell-computer-board").forEach((e=>{e.addEventListener("click",(e=>{if(S.isPlayerTurn()){const t=e.target.getAttribute("data-x"),i=e.target.getAttribute("data-y");S.isCoordinateFree("computer",t,i)&&(S.isShipHit("computer",t,i)?e.target.classList.add("hit"):(e.target.classList.add("miss"),S.changeTurn(),n()))}}))}))}}})();v.initPage(),S.randomShipPlacing(),v.playerEvent()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,